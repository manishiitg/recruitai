version: '3.7'

services:

    rabbitmq:
        image: rabbitmq:3-management
        hostname: rabbitmq
        ports:
            # The standard AMQP protocol port
            - '5672:5672'
            # HTTP management UI
            - '15672:15672'
        networks:
            - ai

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.6.0
        container_name: elasticsearch
        volumes:
            - type: bind
              source: ./elasticsearch/config/elasticsearch.yml
              target: /usr/share/elasticsearch/config/elasticsearch.yml
              read_only: true
            - type: volume
              source: elasticsearch
              target: /usr/share/elasticsearch/data
        ports:
            - "9200:9200"
            - "9300:9300"
        ulimits:
            memlock:
                soft: -1
                hard: -1
        environment:
            ES_JAVA_OPTS: "-Xmx512m -Xms512m"
            # ELASTIC_PASSWORD: 
            # Use single node discovery in order to disable production mode and avoid bootstrap checks
            # see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
            discovery.type: single-node
        networks:
            - ai
        
    kibana:
        image: docker.elastic.co/kibana/kibana:7.6.0
        environment:
            SERVER_NAME: kibana.local
            ELASTICSEARCH_URL: http://elasticsearch:9200
        volumes:
            - type: bind
              source: ./kibana/config/kibana.yml
              target: /usr/share/kibana/config/kibana.yml
              read_only: true
        ports:
            - "5601:5601"
        depends_on:
            - elasticsearch
        networks:
            - ai

    logstash:
        image: docker.elastic.co/logstash/logstash:7.6.0
        volumes:
            - type: bind
              source: ./logstash/config/logstash.yml
              target: /usr/share/logstash/config/logstash.yml
              read_only: true
            - type: bind
              source: ./logstash/pipeline
              target: /usr/share/logstash/pipeline
              read_only: true
        ports:
        - "5000:5000/tcp"
        - "5000:5000/udp"
        - "9600:9600"
        environment:
            LS_JAVA_OPTS: "-Xmx256m -Xms256m"
        depends_on:
            - elasticsearch
        networks:
            - ai

    filebeat:
        image: "docker.elastic.co/beats/filebeat:7.6.0"
        user:
            root
        volumes:
            - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
            - /var/lib/docker:/var/lib/docker:ro
            - /var/run/docker.sock:/var/run/docker.sock
            - /var/log/recruitai:/var/log/recruitai:ro
        command: ["--strict.perms=false"]
        depends_on:
            - logstash
        networks:
            - ai
    redis:
        image: redis
        expose:
            - 6379
        networks:
            - ai
        
    # rq-worker:
    #     image: rq-worker
    #     build: ./rq-worker
    #     environment: 
    #         - REDIS_HOST=redis
    #         - REDIS_PORT=6379
    #         - REDIS_DB=0
    #     volumes: 
    #         - ./app:/pythonimports
    #     networks:
    #         - ai
    
    rq-dashboard:
        image: eoranged/rq-dashboard
        environment: 
            - RQ_DASHBOARD_REDIS_URL=redis://redis:6379
        ports:
            - 9181:9181
        networks:
            - ai

    ai:
        image: recruitai
        build: .
        ports:
            - "8086:5001"
        volumes:
            - ./pretrained:/workspace/pretrained:ro
            - ./batchprocessing:/workspace/batchprocessing 
            - ./cvreconstruction:/workspace/cvreconstruction 
            - /var/log/recruitai:/workspace/logs 
            - ./app:/workspace/app
        environment:
            - ELASTIC_SEARCH_URL=elasticsearch:9200
            - REDIS_DB=redis
            - REDIS_PORT=6379
            - RECRUIT_BACKEND_DB=mongodb://staging_recruit:staging_recruit@5.9.144.226:27017/staging_recruit
            - CV_BUCKET_URL=staticrecruitai.excellencetechnologies.in
            - IS_DEV=False
            - RESUME_INDEX_NAME=resume
            - RABBIT_DB=amqp://guest:guest@rabbitmq:5672/%2F?connection_attempts=3&heartbeat=3600
            - BATCH_PROCESSING_DELAY=60
        depends_on:
            - elasticsearch
            - redis
        networks:
            - ai

    resumemq:
        # If needed, Docker Compose will automatically run consumer/Dockerfile.
        build: microservice/resume
        volumes:
            - ./pretrained:/workspace/pretrained:ro
            - ./batchprocessing:/workspace/batchprocessing 
            - ./cvreconstruction:/workspace/cvreconstruction 
            - /var/log/recruitai:/workspace/logs  
            - ./microservice/resume/app:/workspace/app            
        # Environment variables:
        environment:
            # The location of the RabbitMQ server.  "amqp" is the protocol;
            # "rabbitmq" is the hostname.  Note that there is not a guarantee
            # that the server will start first!  Telling the pika client library
            # to try multiple times gets around this ordering issue.
            AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'
            CV_BUCKET_URL: 'staticrecruitai.excellencetechnologies.in'
            REDIS_HOST: 'redis'
            REDIS_PORT : '6379'
            RECRUIT_BACKEND_DB: "mongodb://176.9.137.77:27017/hr_recruit_dev"
            RECRUIT_BACKEND_DATABASE: "hr_recruit_dev"
    
        # Again, run on the private network.  Needed to see the "rabbitmq"
        # magic Docker DNS name.
        networks:
            - ai
        
volumes: 
    elasticsearch:

networks:
    ai:
        driver: bridge